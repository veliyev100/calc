# Проект Калькулятор

## Описание
Проект "Калькулятор" является приложением на C++, предназначенным для выполнения базовых математических операций и проверки валидности выражений. Оно включает основные функции вычислений, проверки ввода и модуль тестирования для обеспечения корректной работы программы.

---

## Основной функционал

### Функции
1. **`applyOperation(double a, double b, char op)`**
   - **Описание**: Выполняет базовые математические операции (`+`, `-`, `*`, `/`) над двумя числами.
   - **Параметры**:
     - `double a`: Первый операнд.
     - `double b`: Второй операнд.
     - `char op`: Операция (`+`, `-`, `*`, `/`).
   - **Возвращает**: Результат вычисления.
   - **Исключения**: Генерирует ошибку при попытке деления на ноль.

2. **`isValidExpression(const std::string& expr)`**
   - **Описание**: Проверяет, является ли строка валидным математическим выражением, содержащим числа, операции, пробелы и точки для дробных чисел.
   - **Параметры**:
     - `const std::string& expr`: Строка выражения для проверки.
   - **Возвращает**: Логическое значение `true`, если выражение корректно, и `false` в противном случае.

---

## Структура проекта

- **`calculator.h`**
  - Заголовочный файл с объявлениями функций `applyOperation` и `isValidExpression`.

- **`calculator.cpp`**
  - Файл реализации функций, объявленных в `calculator.h`.

- **`CMakeLists.txt`**
  - Конфигурация CMake для сборки проекта и тестов.

- **`test_calculator.cpp`**
  - Модуль тестирования с использованием библиотеки Doctest, который проверяет работу всех ключевых функций проекта.

---


Примеры тестов:

### Тесты для `applyOperation`
```cpp
TEST_CASE("applyOperation") {
    CHECK(applyOperation(2, 3, '+') == 5);
    CHECK(applyOperation(5, 3, '-') == 2);
    CHECK(applyOperation(4, 2, '*') == 8);
    CHECK(applyOperation(6, 2, '/') == 3);
}
```

### Тесты для `isValidExpression`
```cpp
TEST_CASE("isValidExpression") {
    CHECK(isValidExpression("12 + 5"));
    CHECK(!isValidExpression("12 + a"));
    CHECK(isValidExpression("3.14 * 2"));
    CHECK(!isValidExpression("#invalid"));
}
```



